{"version":3,"sources":["cone-area/ConeGenerator.js","cone-area/ConeArea.js","cone-page/ConePage.js","App.js","reportWebVitals.js","index.js"],"names":["ConeGenerator","h","r","n","occuracy","minEdges","maxEdges","this","height","radius","segments","THREE","traiglesBottom","edges","geometry","vertices3d","get3dVertices","vertices","push","segmentFaces","getSegmentFace","bottomFaces","getBottomFace","faces","computeFaceNormals","x","y","triangles","i","length","ConeArea","addEventHandler","window","addEventListener","mousemoveHandler","removeEventHandler","removeEventListener","e","cone","rotation","movementX","z","movementY","addModels","props","parameters","bottomTriangles","getGeometry","material","color","scene","add","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","renderScene","renderer","setSize","innerWidth","innerHeight","render","camera","spotLight","position","set","spotLight2","lookAt","document","body","appendChild","domElement","removeChild","ref","mount","Component","ConePage","useState","setHeight","setRadius","setSegments","coordinates","setCoordinates","handleChange","f","target","value","fetchApi","a","fetch","method","headers","JSON","stringify","response","json","onSendData","preventDefault","className","onSubmit","type","min","max","name","onChange","required","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f46dbfb3.chunk.js","sourcesContent":["import * as THREE from 'three';\n\n/**\n * Класс для создания конуса в three.js\n *\n * @author Julia\n * @version 1.0.0\n */\nexport class ConeGenerator {\n  occuracy = 3;\n  minEdges = 3;\n  maxEdges = 150;\n  /**\n   *\n   * @param {number} h Высота конуса\n   * @param {number} r Радиус конуса\n   * @param {number} n Количество сегментов конуса\n   * @constructor\n   */\n  constructor(h, r, n) {\n    this.height = h < 1 ? 1 : n > 100 ? 100 : h;\n    this.radius = r < 1 ? 1 : r > 100 ? 100 : r;\n    this.segments =\n      n < this.minEdges ? this.minEdges : n > this.maxEdges ? this.maxEdges : n;\n  }\n  /**\n   * Возвращает координаты вершины конуса\n   * @return {THREE.Vector3}\n   */\n  getTopVertice() {\n    return new THREE.Vector3(0, this.height, 0);\n  }\n  /**\n   * Возвращает готовую фигуру\n   * @return {THREE.Geometry}\n   */\n  getGeometry(traiglesBottom, edges) {\n    const geometry = new THREE.Geometry();\n    const vertices3d = this.get3dVertices(edges);\n    geometry.vertices.push(...vertices3d);\n\n    const segmentFaces = this.getSegmentFace(this.segments);\n    const bottomFaces = this.getBottomFace(traiglesBottom);\n    geometry.faces.push(...segmentFaces, ...bottomFaces);\n    geometry.computeFaceNormals();\n    return geometry;\n  }\n  /**\n   * Возвращает массив с трехмерными координатами основания конуса\n   * @param {number[][]} edges Массив с 2d координатами основания конуса\n   * @return {THREE.Vector3[] } Массив с 3d координатами основания конуса\n   */\n  get3dVertices(edges) {\n    const vertices = [];\n    for (let [x, y] of edges) {\n      vertices.push(new THREE.Vector3(x, 0, y));\n    }\n    vertices.push(new THREE.Vector3(0, this.height, 0));\n    return vertices;\n  }\n  /**\n   * Возвращает Face основания конуса,\n   * рассчитывается с помощью функции деления на треуголники\n   *\n   * @return { THREE.Face3[]}\n   */\n  getBottomFace(triangles) {\n    const bottomFaces = [];\n    for (let i = 0; i < triangles.length; i++) {\n      bottomFaces.push(\n        new THREE.Face3(triangles[i][0], triangles[i][1], triangles[i][2])\n      );\n    }\n    return bottomFaces;\n  }\n\n  /**\n   * Получить массив face3 для сегментов конуса\n   *\n   * @param {numer} n количество сегментов\n   * @return {Face3[]}\n   */\n  getSegmentFace(n) {\n    const segmentFaces = [];\n    for (let i = 0; i <= n; i++) {\n      segmentFaces.push(new THREE.Face3((i + 1) % n, i, n));\n    }\n    return segmentFaces;\n  }\n}\n","import React, { Component } from 'react';\n\nimport * as THREE from 'three';\nimport { ConeGenerator } from './ConeGenerator';\n\nclass ConeArea extends Component {\n  componentDidMount() {\n    this.scene = new THREE.Scene();\n\n    let spotLight = new THREE.SpotLight(0xeeeece);\n    spotLight.position.set(1000, 1000, 1000);\n    this.scene.add(spotLight);\n    let spotLight2 = new THREE.SpotLight(0xddddce);\n    spotLight2.position.set(-300, -300, -300);\n    this.scene.add(spotLight2);\n\n    this.camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      1,\n      1000\n    );\n    this.camera.position.set(5, 2, 5);\n    this.camera.lookAt(0, 0, 0);\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n\n    this.addModels();\n\n    this.renderScene();\n    //start animation\n    this.start();\n\n    window.addEventListener('mousedown', this.addEventHandler);\n\n    window.addEventListener('mouseup', this.removeEventHandler);\n  }\n  addEventHandler = () => {\n    window.addEventListener('mousemove', this.mousemoveHandler);\n  };\n  removeEventHandler = () => {\n    window.removeEventListener('mousemove', this.mousemoveHandler);\n  };\n  mousemoveHandler = (e) => {\n    this.cone.rotation.y += e.movementX / 100;\n    this.cone.rotation.z += e.movementY / 100;\n  };\n  addModels = () => {\n    const { height, radius, segments } = this.props.parameters;\n    const { bottomTriangles, edges } = this.props.vertices;\n\n    const geometry = new ConeGenerator(height, radius, segments).getGeometry(\n      bottomTriangles,\n      edges\n    );\n    const material = new THREE.MeshPhongMaterial({ color: 0x44ff44 });\n    this.cone = new THREE.Mesh(geometry, material);\n    this.scene.add(this.cone);\n  };\n  componentWillUnmount() {\n    this.stop();\n    window.removeEventListener('mousedown', this.addEventHandler);\n\n    window.removeEventListener('mouseup', this.removeEventHandler);\n    document.body.removeChild(this.renderer.domElement);\n  }\n  start = () => {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate);\n    }\n  };\n  stop = () => {\n    cancelAnimationFrame(this.frameId);\n  };\n  animate = () => {\n    this.renderScene();\n    requestAnimationFrame(this.animate);\n  };\n  renderScene = () => {\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  render() {\n    return (\n      <div\n        ref={(mount) => {\n          this.mount = mount;\n        }}\n      ></div>\n    );\n  }\n}\nexport default ConeArea;\n","import { useState } from 'react';\nimport ConeArea from '../cone-area/ConeArea';\nimport './input-form.css';\n\nconst ConePage = () => {\n  const [height, setHeight] = useState(4);\n  const [radius, setRadius] = useState(2);\n  const [segments, setSegments] = useState(14);\n  const [coordinates, setCoordinates] = useState(null);\n\n  const handleChange = (f) => (e) => {\n    f(e.target.value);\n  };\n\n  const fetchApi = async () => {\n    const url =\n      process.env.NODE_ENV === 'development'\n        ? 'http://localhost:5000'\n        : 'https://infinite-depths-23650.herokuapp.com';\n    const response = await fetch(`${url}/cone`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ radius, segments }),\n    });\n    const json = await response.json();\n\n    return json;\n  };\n\n  const onSendData = async (e) => {\n    e.preventDefault();\n    setCoordinates(null);\n    const coordinates = await fetchApi();\n    setCoordinates(coordinates);\n  };\n\n  return (\n    <div className='input-group'>\n      <form className='input-form' onSubmit={onSendData}>\n        <label className='input-form__text'>Высота конуса:</label>\n        <input\n          className='input-form__height'\n          type='range'\n          min='0.001'\n          max='7.000'\n          name='height'\n          value={height}\n          onChange={handleChange(setHeight)}\n          required\n        ></input>\n\n        <label className='input-form__text'>Радиус основания конуса:</label>\n        <input\n          className='input-form__radius'\n          type='range'\n          min='0.001'\n          max='8.000'\n          name='radius'\n          value={radius}\n          onChange={handleChange(setRadius)}\n          required\n        ></input>\n\n        <label className='input-form__text'>Количество сегментов конуса:</label>\n        <input\n          className='input-form__segments'\n          type='range'\n          min='3'\n          max='100'\n          value={segments}\n          name='segments'\n          onChange={handleChange(setSegments)}\n          required\n        ></input>\n        <button className='input-form__btn'>Построить</button>\n      </form>\n\n      {coordinates && (\n        <ConeArea\n          vertices={coordinates}\n          parameters={{ height, radius, segments }}\n        />\n      )}\n    </div>\n  );\n};\nexport default ConePage;\n","import './App.css';\nimport ConePage from './cone-page/ConePage';\n\nfunction App() {\n  return (\n    <div>\n      <ConePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}